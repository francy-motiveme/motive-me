#!/usr/bin/env node

/**
 * Script pour diagnostiquer et corriger les probl√®mes de schema cache Supabase
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîç DIAGNOSTIC COMPLET DU SCHEMA SUPABASE\n');
console.log('‚ïê'.repeat(60) + '\n');

if (!SUPABASE_URL || !SERVICE_KEY) {
    console.error('‚ùå Variables d\'environnement manquantes');
    process.exit(1);
}

const supabaseAdmin = createClient(SUPABASE_URL, SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

async function diagnoseProblem() {
    try {
        console.log('1Ô∏è‚É£ Test de connexion basique...');
        const { data: session } = await supabaseAdmin.auth.getSession();
        console.log('‚úÖ Connexion √©tablie\n');

        console.log('2Ô∏è‚É£ Tentative de lecture directe des tables...');
        const tables = ['users', 'challenges', 'check_ins', 'notifications'];
        
        for (const table of tables) {
            console.log(`\nüìã Table: ${table}`);
            
            // Test avec la cl√© service (bypass RLS)
            const { data, error, count } = await supabaseAdmin
                .from(table)
                .select('*', { count: 'exact', head: false })
                .limit(1);
            
            if (error) {
                console.log(`   ‚ùå Erreur: ${error.message}`);
                console.log(`   üìä Code: ${error.code}`);
                console.log(`   üîç D√©tails: ${error.details || 'N/A'}`);
                console.log(`   üí° Hint: ${error.hint || 'N/A'}`);
            } else {
                console.log(`   ‚úÖ Table accessible`);
                console.log(`   üìä Nombre d'enregistrements: ${count || 0}`);
            }
        }

        console.log('\n\n3Ô∏è‚É£ V√©rification du sch√©ma avec la cl√© anon...');
        const ANON_KEY = process.env.SUPABASE_ANON_KEY;
        const supabaseAnon = createClient(SUPABASE_URL, ANON_KEY);
        
        for (const table of tables) {
            const { data, error } = await supabaseAnon
                .from(table)
                .select('count')
                .limit(1);
            
            if (error) {
                console.log(`‚ùå ${table}: ${error.message}`);
            } else {
                console.log(`‚úÖ ${table}: Accessible avec cl√© anon`);
            }
        }

        console.log('\n\n4Ô∏è‚É£ RECOMMANDATIONS:');
        console.log('‚ïê'.repeat(60));
        console.log(`
Si vous voyez "schema cache" errors:

üìã SOLUTION 1: Rafra√Æchir le cache Supabase
   1. Allez sur https://supabase.com/dashboard
   2. S√©lectionnez votre projet
   3. Allez dans Settings > API
   4. Cliquez sur "Refresh schema cache"

üìã SOLUTION 2: Recr√©er les tables via SQL Editor
   1. Allez dans SQL Editor
   2. Ex√©cutez: DROP SCHEMA public CASCADE; CREATE SCHEMA public;
   3. Ex√©cutez le contenu de supabase_init.sql
   4. Rafra√Æchissez la page

üìã SOLUTION 3: V√©rifier les politiques RLS
   1. Allez dans Authentication > Policies
   2. V√©rifiez que les politiques existent pour chaque table
   3. V√©rifiez que la colonne 'id' existe dans la table 'users'

üìã SOLUTION 4: Probl√®me de projet Supabase
   - V√©rifiez que SUPABASE_URL correspond bien √† votre projet actif
   - URL actuelle: ${SUPABASE_URL}
        `);

    } catch (error) {
        console.error('\n‚ùå ERREUR CRITIQUE:', error.message);
        console.error('Stack:', error.stack);
    }
}

diagnoseProblem();
