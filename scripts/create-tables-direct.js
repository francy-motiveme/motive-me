
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üöÄ Cr√©ation directe des tables Supabase...\n');

if (!supabaseUrl || !serviceKey) {
    console.error('‚ùå Variables manquantes:');
    console.error('- VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
    console.error('- VITE_SUPABASE_SERVICE_ROLE_KEY:', serviceKey ? '‚úÖ' : '‚ùå');
    console.error('\nüîß SOLUTION: Configurez les secrets dans Replit');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceKey);

async function createTablesDirectly() {
    try {
        console.log('1Ô∏è‚É£ Test de connexion Supabase...');
        
        // Test de connexion basique - utiliser une requ√™te qui fonctionne m√™me sans tables
        const { data: testData, error: testError } = await supabase
            .rpc('version')
            .then(() => ({ data: true, error: null }))
            .catch(async () => {
                // Si RPC ne marche pas, tester avec une requ√™te simple sur information_schema
                return await supabase
                    .from('information_schema.tables')
                    .select('table_name')
                    .limit(1);
            });
            
        if (testError && !testError.message.includes('does not exist') && !testError.message.includes('schema cache')) {
            throw new Error(`Connexion √©chou√©e: ${testError.message}`);
        }
        
        console.log('‚úÖ Connexion Supabase r√©ussie');
        
        console.log('\n2Ô∏è‚É£ V√©rification des tables existantes...');
        
        // V√©rifier quelles tables existent d√©j√†
        const tables = ['users', 'challenges', 'check_ins', 'notifications'];
        const existingTables = [];
        const missingTables = [];
        
        for (const table of tables) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('count')
                    .limit(1);
                    
                if (error && error.message.includes('does not exist')) {
                    missingTables.push(table);
                    console.log(`‚ùå Table '${table}': N'existe pas`);
                } else {
                    existingTables.push(table);
                    console.log(`‚úÖ Table '${table}': Existe d√©j√†`);
                }
            } catch (err) {
                missingTables.push(table);
                console.log(`‚ùå Table '${table}': Erreur - ${err.message}`);
            }
        }
        
        if (missingTables.length === 0) {
            console.log('\nüéâ TOUTES LES TABLES EXISTENT D√âJ√Ä !');
            console.log('Votre base de donn√©es est correctement configur√©e.');
            return;
        }
        
        console.log(`\n3Ô∏è‚É£ Cr√©ation de ${missingTables.length} tables manquantes...`);
        
        // Ex√©cuter le SQL de cr√©ation des tables
        console.log('üîß Ex√©cution du script SQL de cr√©ation...');
        
        const createTablesSQL = `
        -- Table users
        CREATE TABLE IF NOT EXISTS public.users (
            id UUID REFERENCES auth.users(id) PRIMARY KEY,
            email VARCHAR(255) UNIQUE NOT NULL,
            name VARCHAR(255) NOT NULL,
            points INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            badges JSONB DEFAULT '[]'::jsonb,
            preferences JSONB DEFAULT '{"notifications": true}'::jsonb,
            stats JSONB DEFAULT '{"challenges_created": 0}'::jsonb,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );

        -- Table challenges
        CREATE TABLE IF NOT EXISTS public.challenges (
            id SERIAL PRIMARY KEY,
            user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
            title VARCHAR(100) NOT NULL,
            duration INTEGER NOT NULL,
            frequency VARCHAR(50) NOT NULL,
            witness_email VARCHAR(255),
            gage TEXT,
            status VARCHAR(50) DEFAULT 'active',
            start_date TIMESTAMP WITH TIME ZONE,
            end_date TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );

        -- Table check_ins
        CREATE TABLE IF NOT EXISTS public.check_ins (
            id SERIAL PRIMARY KEY,
            user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
            challenge_id INTEGER REFERENCES public.challenges(id) ON DELETE CASCADE,
            occurrence_id VARCHAR(100),
            checked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            notes TEXT
        );

        -- Table notifications
        CREATE TABLE IF NOT EXISTS public.notifications (
            id SERIAL PRIMARY KEY,
            user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
            type VARCHAR(50),
            title VARCHAR(200),
            message TEXT,
            read BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );

        -- Activer RLS
        ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
        ALTER TABLE public.challenges ENABLE ROW LEVEL SECURITY;
        ALTER TABLE public.check_ins ENABLE ROW LEVEL SECURITY;
        ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

        -- Politiques de base
        CREATE POLICY IF NOT EXISTS "Users can view own profile" ON public.users FOR SELECT USING (auth.uid() = id);
        CREATE POLICY IF NOT EXISTS "Users can update own profile" ON public.users FOR UPDATE USING (auth.uid() = id);
        CREATE POLICY IF NOT EXISTS "Users can insert own profile" ON public.users FOR INSERT WITH CHECK (auth.uid() = id);
        `;

        try {
            // Utiliser la fonction rpc pour ex√©cuter du SQL
            const { data: sqlResult, error: sqlError } = await supabase.rpc('exec_sql', { sql: createTablesSQL });
            
            if (sqlError) {
                console.log('‚ö†Ô∏è Erreur SQL RPC:', sqlError.message);
                console.log('üìã SOLUTION MANUELLE REQUISE - Copiez le SQL ci-dessous dans l\'√©diteur SQL Supabase:');
                console.log('\n--- D√âBUT DU SQL ---');
                console.log(createTablesSQL);
                console.log('--- FIN DU SQL ---\n');
            } else {
                console.log('‚úÖ Tables cr√©√©es avec succ√®s via SQL');
            }
        } catch (sqlErr) {
            console.log('‚ö†Ô∏è M√©thode SQL non disponible');
            console.log('üìã SOLUTION MANUELLE REQUISE:');
            console.log('1. Allez sur https://supabase.com/dashboard');
            console.log('2. S√©lectionnez votre projet');
            console.log('3. Cliquez sur "SQL Editor"');
            console.log('4. Copiez et ex√©cutez le contenu du fichier "supabase_init.sql"');
        }
        
        console.log('\n4Ô∏è‚É£ V√©rification finale...');
        
        // V√©rification finale
        let finalCheck = 0;
        for (const table of tables) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('count')
                    .limit(1);
                    
                if (!error || !error.message.includes('does not exist')) {
                    finalCheck++;
                    console.log(`‚úÖ Table '${table}': Accessible`);
                } else {
                    console.log(`‚ùå Table '${table}': Toujours manquante`);
                }
            } catch (err) {
                console.log(`‚ùå Table '${table}': Erreur - ${err.message}`);
            }
        }
        
        console.log('\nüéØ R√âSULTAT FINAL:');
        console.log(`Tables fonctionnelles: ${finalCheck}/${tables.length}`);
        
        if (finalCheck === 0) {
            console.log('\n‚ö†Ô∏è ATTENTION: Aucune table cr√©√©e automatiquement');
            console.log('üìã SOLUTION MANUELLE REQUISE:');
            console.log('1. Allez sur https://supabase.com/dashboard');
            console.log('2. S√©lectionnez votre projet');
            console.log('3. Cliquez sur "SQL Editor"');
            console.log('4. Copiez le contenu du fichier "supabase_init.sql"');
            console.log('5. Collez et ex√©cutez dans l\'√©diteur SQL');
        } else if (finalCheck < tables.length) {
            console.log('\n‚ö†Ô∏è Cr√©ation partielle - Certaines tables manquent encore');
            console.log('üìã Utilisez la m√©thode manuelle pour les tables restantes');
        } else {
            console.log('\nüéâ SUCC√àS COMPLET - Toutes les tables sont pr√™tes !');
        }
        
    } catch (error) {
        console.error('\n‚ùå ERREUR CRITIQUE:', error.message);
        console.log('\nüîß ACTIONS √Ä V√âRIFIER:');
        console.log('1. Les secrets Replit sont-ils configur√©s ?');
        console.log('2. Les cl√©s Supabase sont-elles valides ?');
        console.log('3. Le projet Supabase est-il actif ?');
    }
}

createTablesDirectly();
